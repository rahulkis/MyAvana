// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAvana.DAL.Auth;

namespace MyAvana.Auth.Api.Migrations
{
    [DbContext(typeof(AvanaContext))]
    partial class AvanaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.AdditionalHairInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DensityDescription");

                    b.Property<string>("DensityId");

                    b.Property<string>("ElasticityDescription");

                    b.Property<string>("ElasticityId");

                    b.Property<int>("HairId");

                    b.Property<string>("HealthDescription");

                    b.Property<string>("HealthId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PorosityDescription");

                    b.Property<string>("PorosityId");

                    b.Property<string>("TextureDescription");

                    b.Property<string>("TextureId");

                    b.Property<string>("TypeDescription");

                    b.Property<string>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("AdditionalHairInfo");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.AdminAuthentication", b =>
                {
                    b.Property<int>("AdminAuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("ExpireOn");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("UserId");

                    b.Property<Guid>("token");

                    b.HasKey("AdminAuthenticationId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminAuthentications");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.AlexaFAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("Description");

                    b.Property<string>("DetailedResponse");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Keywords");

                    b.Property<string>("ShortResponse");

                    b.HasKey("Id");

                    b.ToTable("AlexaFAQs");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("HairGoalChallengeId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleGuidances", b =>
                {
                    b.Property<int>("ArticleGuidanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogArticleId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("GuidanceId");

                    b.Property<int?>("GuidancesId");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ArticleGuidanceId");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("GuidancesId");

                    b.ToTable("ArticleGuidances");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleHairStyle", b =>
                {
                    b.Property<int>("ArticleHairStyleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogArticleId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("HairStylesId");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ArticleHairStyleId");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("HairStylesId");

                    b.ToTable("ArticleHairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleMoods", b =>
                {
                    b.Property<int>("ArticleMoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogArticleId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("MoodId");

                    b.Property<int?>("MoodsId");

                    b.HasKey("ArticleMoodId");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("MoodsId");

                    b.ToTable("ArticleMoods");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleProduct", b =>
                {
                    b.Property<int>("ArticleProductsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogArticleId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ProductEntityId");

                    b.HasKey("ArticleProductsId");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("ArticleProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BlogArticle", b =>
                {
                    b.Property<int>("BlogArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<string>("HeadLine");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Url");

                    b.HasKey("BlogArticleId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandClassification", b =>
                {
                    b.Property<int>("BrandClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("BrandClassificationId");

                    b.ToTable("BrandClassifications");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairChallenge", b =>
                {
                    b.Property<int>("BrandHairChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int?>("HairChallengeId");

                    b.Property<bool>("IsActive");

                    b.HasKey("BrandHairChallengeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("HairChallengeId");

                    b.ToTable("BrandHairChallenges");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairGoal", b =>
                {
                    b.Property<int>("BrandHairGoalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int?>("HairGoalId");

                    b.Property<bool>("IsActive");

                    b.HasKey("BrandHairGoalId");

                    b.HasIndex("BrandId");

                    b.HasIndex("HairGoalId");

                    b.ToTable("BrandHairGoals");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairState", b =>
                {
                    b.Property<int>("BrandHairStateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("HairStateId");

                    b.Property<bool>("IsActive");

                    b.HasKey("BrandHairStateId");

                    b.HasIndex("BrandId");

                    b.HasIndex("HairStateId");

                    b.ToTable("BrandHairState");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairType", b =>
                {
                    b.Property<int>("BrandHairTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("HairTypeId");

                    b.Property<bool>("IsActive");

                    b.HasKey("BrandHairTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("HairTypeId");

                    b.ToTable("BrandHairTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandMolecularWeight", b =>
                {
                    b.Property<int>("BrandMolecularWeightId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MolecularWeightId");

                    b.HasKey("BrandMolecularWeightId");

                    b.HasIndex("BrandId");

                    b.HasIndex("MolecularWeightId");

                    b.ToTable("BrandMolecularWeight");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandRecommendationStatus", b =>
                {
                    b.Property<int>("BrandRecommendationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("BrandRecommendationStatusId");

                    b.ToTable("BrandRecommendationStatus");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandTag", b =>
                {
                    b.Property<int>("BrandTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("TagsId");

                    b.HasKey("BrandTagId");

                    b.HasIndex("BrandId");

                    b.HasIndex("TagsId");

                    b.ToTable("BrandTags");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Brands", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("FeaturedIngredients");

                    b.Property<bool?>("HideInSearch");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("Rank");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandsBrandRecommendationStatus", b =>
                {
                    b.Property<int>("BrandsBrandRecommendationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("BrandRecommendationStatusId");

                    b.Property<bool>("IsActive");

                    b.HasKey("BrandsBrandRecommendationStatusId");

                    b.HasIndex("BrandId");

                    b.HasIndex("BrandRecommendationStatusId");

                    b.ToTable("BrandsBrandRecommendationStatus");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ClassificationBrand", b =>
                {
                    b.Property<int>("ClassificationBrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandClassificationId");

                    b.Property<int>("BrandId");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ClassificationBrandId");

                    b.HasIndex("BrandClassificationId");

                    b.HasIndex("BrandId");

                    b.ToTable("ClassificationBrands");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("GroupPostId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.HasIndex("GroupPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerAIResult", b =>
                {
                    b.Property<int>("CustomerAIResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AIResult");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("HairProfileId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsVersion2");

                    b.Property<Guid>("UserId");

                    b.HasKey("CustomerAIResultId");

                    b.HasIndex("HairProfileId");

                    b.ToTable("CustomerAIResults");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerAuthentication", b =>
                {
                    b.Property<int>("CustomerAuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("ExpireOn");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("UserId");

                    b.Property<Guid>("token");

                    b.HasKey("CustomerAuthenticationId");

                    b.ToTable("CustomerAuthentications");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerHairChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("HairInfoId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("CustomerHairChallenge");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerHairGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("HairInfoId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("CustomerHairGoals");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerMessage", b =>
                {
                    b.Property<int>("CustomerMessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentFile");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Message");

                    b.Property<string>("Subject");

                    b.Property<Guid>("UserId");

                    b.HasKey("CustomerMessageId");

                    b.ToTable("CustomerMessage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerPreference", b =>
                {
                    b.Property<int>("CustomerPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("CustomerPreferenceId");

                    b.ToTable("CustomerPreference");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerSubscriptionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("ProductId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("CustomerSubscriptionHistory");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerTypeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("NewCustomerTypeId");

                    b.Property<int?>("OldCustomerTypeId");

                    b.Property<int?>("UpdatedByUserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NewCustomerTypeId");

                    b.HasIndex("OldCustomerTypeId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("CustomerTypeHistory");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineHairStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HairStyleId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineHairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<int>("IngredientId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineIngredients");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineRegimens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenId");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CurrentMood");

                    b.Property<string>("Description");

                    b.Property<string>("GuidanceNeeded");

                    b.Property<string>("HairStyle");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool?>("IsRead");

                    b.Property<string>("Notes");

                    b.Property<string>("ProfileImage");

                    b.Property<DateTime>("TrackTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DailyRoutineTracker");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DigitalAnalysisTrial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TrialEndDate");

                    b.HasKey("Id");

                    b.ToTable("DigitalAnalysisTrial");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DiscountCodes", b =>
                {
                    b.Property<int>("DiscountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DiscountCode");

                    b.Property<int>("DiscountPercent");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<bool>("IsActive");

                    b.HasKey("DiscountCodeId");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.EducationTip", b =>
                {
                    b.Property<int>("EducationTipsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("ShowOnMobile");

                    b.HasKey("EducationTipsId");

                    b.ToTable("EducationTips");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Elasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Elasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessRequested");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairType");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("ShowOnMobile");

                    b.Property<int?>("UpdatedByUserId");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.GroupPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioUrl");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("HairType");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("UserEmail");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Guidances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Guidance");

                    b.Property<bool?>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Guidances");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairAnalysisStatus", b =>
                {
                    b.Property<int>("HairAnalysisStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("StatusName");

                    b.HasKey("HairAnalysisStatusId");

                    b.ToTable("HairAnalysisStatus");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairAnalysisStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("NewHairAnalysisStatusId");

                    b.Property<int?>("OldHairAnalysisStatusId");

                    b.Property<int?>("UpdatedByUserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NewHairAnalysisStatusId");

                    b.HasIndex("OldHairAnalysisStatusId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("HairAnalysisStatusHistory");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairAnalyst", b =>
                {
                    b.Property<int>("HairAnalystId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalystImage");

                    b.Property<string>("AnalystName");

                    b.Property<DateTime?>("CreatedOn");

                    b.HasKey("HairAnalystId");

                    b.ToTable("HairAnalyst");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairChallengeVideoMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairChallengeId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.HasKey("Id");

                    b.HasIndex("HairChallengeId");

                    b.HasIndex("MediaLinkEntityId");

                    b.ToTable("HairChallengeVideoMapping");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairChallenges", b =>
                {
                    b.Property<int>("HairChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("Rank");

                    b.HasKey("HairChallengeId");

                    b.ToTable("HairChallenges");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairElasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElasticityId");

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.HasKey("Id");

                    b.HasIndex("ElasticityId");

                    b.HasIndex("HairProfileId");

                    b.ToTable("HairElasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairGoal", b =>
                {
                    b.Property<int>("HairGoalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("Rank");

                    b.HasKey("HairGoalId");

                    b.ToTable("HairGoals");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairGoalVideoMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairGoalId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.HasKey("Id");

                    b.HasIndex("HairGoalId");

                    b.HasIndex("MediaLinkEntityId");

                    b.ToTable("HairGoalVideoMapping");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<int>("HealthId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("HealthId");

                    b.ToTable("HairHealths");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.Property<int?>("ObsBreakageId");

                    b.Property<int?>("ObsChemicalProductId");

                    b.Property<int?>("ObsChemicalProductsId");

                    b.Property<int?>("ObsDamageId");

                    b.Property<int?>("ObsElasticityId");

                    b.Property<int?>("ObsPhysicalProductId");

                    b.Property<int?>("ObsPhysicalProductsId");

                    b.Property<int?>("ObsSplittingId");

                    b.Property<int?>("ObservationId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("ObsBreakageId");

                    b.HasIndex("ObsChemicalProductsId");

                    b.HasIndex("ObsDamageId");

                    b.HasIndex("ObsElasticityId");

                    b.HasIndex("ObsPhysicalProductsId");

                    b.HasIndex("ObsSplittingId");

                    b.HasIndex("ObservationId");

                    b.ToTable("HairObservations");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairPorosity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.Property<int>("PorosityId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("PorosityId");

                    b.ToTable("HairPorosities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachedQA");

                    b.Property<string>("ConsultantNotes");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairAnalysisNotes");

                    b.Property<string>("HairId");

                    b.Property<string>("HairType");

                    b.Property<string>("HealthSummary");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBasicHHCP");

                    b.Property<bool>("IsDrafted");

                    b.Property<bool?>("IsViewEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("RecommendationNotes");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("HairProfiles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairScope", b =>
                {
                    b.Property<int>("HairScopeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("HairProfileId");

                    b.Property<string>("HairScopeResult");

                    b.Property<int?>("QAVersion");

                    b.Property<Guid>("UserId");

                    b.HasKey("HairScopeId");

                    b.HasIndex("HairProfileId");

                    b.ToTable("HairScope");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairState", b =>
                {
                    b.Property<int>("HairStateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("HairStateId");

                    b.ToTable("HairState");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandUploadNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsRead");

                    b.Property<int>("SalonId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("SalonId");

                    b.ToTable("HairStrandUploadNotification");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BottomLeftHealthText");

                    b.Property<string>("BottomLeftPhoto");

                    b.Property<string>("BottomLeftStrandDiameter");

                    b.Property<string>("BottomRightHealthText");

                    b.Property<string>("BottomRightPhoto");

                    b.Property<string>("BottomRightStrandDiameter");

                    b.Property<string>("CrownHealthText");

                    b.Property<string>("CrownPhoto");

                    b.Property<string>("CrownStrandDiameter");

                    b.Property<int>("HairProfileId");

                    b.Property<string>("TopLeftHealthText");

                    b.Property<string>("TopLeftPhoto");

                    b.Property<string>("TopLeftStrandDiameter");

                    b.Property<string>("TopRightHealthText");

                    b.Property<string>("TopRightPhoto");

                    b.Property<string>("TopRightStrandDiameter");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("HairStrands");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandsImages", b =>
                {
                    b.Property<int>("StrandsImagesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BottomLeftImage");

                    b.Property<string>("BottomRightImage");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CrownImage");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TopLeftImage");

                    b.Property<string>("TopRightImage");

                    b.HasKey("StrandsImagesId");

                    b.HasIndex("Id");

                    b.ToTable("HairStrandsImages");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Style");

                    b.HasKey("Id");

                    b.ToTable("HairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairType", b =>
                {
                    b.Property<int>("HairTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("HairTypeId");

                    b.ToTable("HairTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Health", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Healths");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.InAppPayload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Payload");

                    b.Property<string>("Platform");

                    b.HasKey("Id");

                    b.ToTable("InAppPayload");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.IngedientsEntity", b =>
                {
                    b.Property<int>("IngedientsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Challenges");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("ImageUrl");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("IngedientsEntityId");

                    b.ToTable("IngedientsEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.LikePosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLike");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("PostId");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("LikePosts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.LiveConsultationCustomer", b =>
                {
                    b.Property<int>("LiveConsultationCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdminJoinDateTime");

                    b.Property<string>("AdminParticipantId");

                    b.Property<string>("AdminToken");

                    b.Property<DateTime>("CompletedDateTime");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CustomerJoinDateTime");

                    b.Property<string>("CustomerParticipantId");

                    b.Property<string>("CustomerToken");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdminJoined");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsCustomerJoined");

                    b.Property<bool>("IsLeft");

                    b.Property<DateTime>("LeftDateTime");

                    b.Property<int>("LiveConsultationUserDetailsId");

                    b.Property<string>("TwilioCompositionSid");

                    b.Property<string>("TwilioCompositionStatus");

                    b.Property<string>("TwilioCompositionUrl");

                    b.Property<string>("TwilioRoomName");

                    b.Property<string>("TwilioRoomSid");

                    b.Property<string>("adminId");

                    b.Property<string>("customerId");

                    b.HasKey("LiveConsultationCustomerId");

                    b.ToTable("LiveConsultationCustomer");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.LiveConsultationStatus", b =>
                {
                    b.Property<int>("LiveConsultationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("StatusDescription");

                    b.HasKey("LiveConsultationStatusId");

                    b.ToTable("LiveConsultationStatus");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.LiveConsultationUserDetails", b =>
                {
                    b.Property<int>("LiveConsultationUserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNo");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("FocusAreaDescription");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPaid");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int>("Status");

                    b.Property<string>("Time");

                    b.Property<string>("TimeZone");

                    b.Property<string>("UserEmail");

                    b.Property<string>("assignedTo");

                    b.Property<bool>("isApproved");

                    b.Property<string>("userId");

                    b.HasKey("LiveConsultationUserDetailsId");

                    b.ToTable("LiveConsultationUserDetails");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MappingHairGoalAndProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("GoalDescription");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("ProductTagsId");

                    b.HasKey("Id");

                    b.ToTable("MappingHairGoalAndProductTags");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MediaLinkEntity", b =>
                {
                    b.Property<int>("MediaLinkEntityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Header");

                    b.Property<Guid>("Id");

                    b.Property<string>("ImageLink");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("ShowOnMobile");

                    b.Property<string>("Title");

                    b.Property<int>("VideoCategoryId");

                    b.Property<string>("VideoId");

                    b.HasKey("MediaLinkEntityId");

                    b.HasIndex("VideoCategoryId");

                    b.ToTable("MediaLinkEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MessageTemplate", b =>
                {
                    b.Property<int>("MessageTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TemplateBody");

                    b.Property<string>("TemplateCode");

                    b.Property<string>("TemplateSubject");

                    b.HasKey("MessageTemplateId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MobileHelpFAQ", b =>
                {
                    b.Property<int>("MobileHelpFAQId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ImageLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<int?>("MobileHelpTopicId");

                    b.Property<string>("Title");

                    b.Property<string>("VideoThumbnail");

                    b.Property<string>("Videolink");

                    b.HasKey("MobileHelpFAQId");

                    b.HasIndex("MobileHelpTopicId");

                    b.ToTable("MobileHelpFAQ");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MobileHelpTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("MobileHelpTopic");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MobileNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MobileNotifications");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MolecularWeight", b =>
                {
                    b.Property<int>("MolecularWeightId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("MolecularWeightId");

                    b.ToTable("MolecularWeight");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Moods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Mood");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsBreakage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsBreakage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsChemicalProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsChemicalProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsDamage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsElasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsElasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsPhysicalProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsPhysicalProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsSplitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsSplitting");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Pororsity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Pororsities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.PrePopulateTypes", b =>
                {
                    b.Property<int>("PrePopulateTypesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductTypeId");

                    b.Property<int>("QuestionId");

                    b.HasKey("PrePopulateTypesId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PrePopulateTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductClassification", b =>
                {
                    b.Property<int>("ProductClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductClassificationId");

                    b.ToTable("ProductClassification");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductCommon", b =>
                {
                    b.Property<int>("ProductCommonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandClassificationId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("CustomerPreferenceId");

                    b.Property<int?>("HairChallengeId");

                    b.Property<int?>("HairGoalId");

                    b.Property<int?>("HairStylesId");

                    b.Property<int?>("HairTypeId");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("MolecularWeightId");

                    b.Property<int?>("ProductClassificationId");

                    b.Property<int?>("ProductEntityId");

                    b.Property<int?>("ProductIndicatorId");

                    b.Property<int?>("ProductRecommendationStatusId");

                    b.Property<int?>("ProductTagsId");

                    b.Property<int?>("ProductTypeId");

                    b.HasKey("ProductCommonId");

                    b.HasIndex("BrandClassificationId");

                    b.HasIndex("CustomerPreferenceId");

                    b.HasIndex("HairChallengeId");

                    b.HasIndex("HairGoalId");

                    b.HasIndex("HairStylesId");

                    b.HasIndex("HairTypeId");

                    b.HasIndex("MolecularWeightId");

                    b.HasIndex("ProductClassificationId");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("ProductIndicatorId");

                    b.HasIndex("ProductRecommendationStatusId");

                    b.HasIndex("ProductTagsId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductCommons");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ImageName");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ProductEntityId");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductIndicator", b =>
                {
                    b.Property<int>("ProductIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductIndicatorId");

                    b.ToTable("ProductIndicator");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductRecommendationStatus", b =>
                {
                    b.Property<int>("ProductRecommendationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductRecommendationStatusId");

                    b.ToTable("ProductRecommendationStatus");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTags", b =>
                {
                    b.Property<int>("ProductTagsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductTagsId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ParentId");

                    b.Property<string>("ProductName");

                    b.Property<int?>("ProductTypeCategoryId");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeCategoryId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsHair");

                    b.Property<bool?>("IsRegimens");

                    b.HasKey("Id");

                    b.ToTable("ProductTypeCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairChallengeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairChallengeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeHairChallenges");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairGoalId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairGoalId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeHairGoals");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairStyleId");

                    b.Property<int?>("HairStylesId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairStylesId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeHairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeScalpChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairScalpChallengeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairScalpChallengeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductTypeScalpChallenge");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questionaire", b =>
                {
                    b.Property<int>("QuestionaireId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("DescriptiveAnswer");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("QA");

                    b.Property<int>("QuestionId");

                    b.Property<string>("UserId");

                    b.HasKey("QuestionaireId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Questionaires");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsTagged");

                    b.Property<string>("Question");

                    b.Property<int>("SerialNo");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsHealthyRegimen");

                    b.Property<bool>("IsStylingRegimen");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<int>("IngredientId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedIngredients");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsHealthyRegimen");

                    b.Property<bool>("IsStylingRegimen");

                    b.Property<string>("Name");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProductTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAllEssential");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStyleRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProductsStyleRecipe");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStylingRegimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAllStyling");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProductsStyleRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedRegimens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStyleRecipeVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.Property<string>("Name");

                    b.Property<string>("ThumbNail");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedStyleRecipeVideos");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("StylistId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedStylists");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("ToolId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedTools");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.Property<string>("Name");

                    b.Property<string>("ThumbNail");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedVideos");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RegimenSteps", b =>
                {
                    b.Property<int>("RegimenStepsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Step10Instruction");

                    b.Property<string>("Step10Photo");

                    b.Property<string>("Step11Instruction");

                    b.Property<string>("Step11Photo");

                    b.Property<string>("Step12Instruction");

                    b.Property<string>("Step12Photo");

                    b.Property<string>("Step13Instruction");

                    b.Property<string>("Step13Photo");

                    b.Property<string>("Step14Instruction");

                    b.Property<string>("Step14Photo");

                    b.Property<string>("Step15Instruction");

                    b.Property<string>("Step15Photo");

                    b.Property<string>("Step16Instruction");

                    b.Property<string>("Step16Photo");

                    b.Property<string>("Step17Instruction");

                    b.Property<string>("Step17Photo");

                    b.Property<string>("Step18Instruction");

                    b.Property<string>("Step18Photo");

                    b.Property<string>("Step19Instruction");

                    b.Property<string>("Step19Photo");

                    b.Property<string>("Step1Instruction");

                    b.Property<string>("Step1Photo");

                    b.Property<string>("Step20Instruction");

                    b.Property<string>("Step20Photo");

                    b.Property<string>("Step2Instruction");

                    b.Property<string>("Step2Photo");

                    b.Property<string>("Step3Instruction");

                    b.Property<string>("Step3Photo");

                    b.Property<string>("Step4Instruction");

                    b.Property<string>("Step4Photo");

                    b.Property<string>("Step5Instruction");

                    b.Property<string>("Step5Photo");

                    b.Property<string>("Step6Instruction");

                    b.Property<string>("Step6Photo");

                    b.Property<string>("Step7Instruction");

                    b.Property<string>("Step7Photo");

                    b.Property<string>("Step8Instruction");

                    b.Property<string>("Step8Photo");

                    b.Property<string>("Step9Instruction");

                    b.Property<string>("Step9Photo");

                    b.HasKey("RegimenStepsId");

                    b.ToTable("RegimenSteps");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Regimens", b =>
                {
                    b.Property<int>("RegimensId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenStepsId");

                    b.Property<int>("Step1");

                    b.Property<int>("Step2");

                    b.Property<int>("Step3");

                    b.Property<int>("Step4");

                    b.Property<int>("Step5");

                    b.Property<string>("Title");

                    b.HasKey("RegimensId");

                    b.HasIndex("RegimenStepsId");

                    b.ToTable("Regimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ReportPosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("PostId");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("ReportPosts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonNotesHHCP", b =>
                {
                    b.Property<int>("SalonNoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<string>("Notes");

                    b.Property<int>("UserId");

                    b.HasKey("SalonNoteId");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("SalonNotesHHCP");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonVideo", b =>
                {
                    b.Property<int>("SalonVideoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.Property<int>("SalonId");

                    b.HasKey("SalonVideoId");

                    b.ToTable("SalonVideos");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Salons", b =>
                {
                    b.Property<int>("SalonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPublicNotes");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SalonLogo");

                    b.Property<string>("SalonName");

                    b.HasKey("SalonId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonsOwner", b =>
                {
                    b.Property<int>("SalonOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("SalonId");

                    b.Property<int>("UserId");

                    b.HasKey("SalonOwnerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("SalonsOwners");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonsStylist", b =>
                {
                    b.Property<int>("SalonStylistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("SalonId");

                    b.Property<int?>("StylistId");

                    b.HasKey("SalonStylistId");

                    b.HasIndex("SalonId");

                    b.HasIndex("StylistId");

                    b.ToTable("SalonsStylists");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ScheduleTime", b =>
                {
                    b.Property<int>("ScheduleTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Time");

                    b.HasKey("ScheduleTimeId");

                    b.ToTable("ScheduleTimes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SharedHHCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsRevoked");

                    b.Property<DateTime?>("RevokedOn");

                    b.Property<Guid>("SharedBy");

                    b.Property<DateTime>("SharedOn");

                    b.Property<Guid>("SharedWith");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("SharedHHCP");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ShopifyRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AlreadyActiveSubscription");

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<bool?>("IsExistingCustomer");

                    b.Property<string>("Payload");

                    b.Property<DateTime>("RequestDate");

                    b.Property<int?>("SubscriptionType");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShopifyRequest");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ShopifySampleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DataModel");

                    b.HasKey("Id");

                    b.ToTable("ShopifySampleDatas");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.States", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StatusTracker", b =>
                {
                    b.Property<int>("StatusTrackerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CustomerId");

                    b.Property<int>("EmailCommunicationCount");

                    b.Property<DateTime?>("EmailCommunicationLastSentOn");

                    b.Property<DateTime?>("ExtensionDate");

                    b.Property<bool>("ExtensionRequested");

                    b.Property<int>("HairAnalysisStatusId");

                    b.Property<int>("InAppNotificationCount");

                    b.Property<DateTime?>("InAppNotificationLastSentOn");

                    b.Property<string>("KitSerialNumber");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastUpdatedOn");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<bool>("WelcomeEmailSent");

                    b.Property<DateTime?>("WelcomeEmailSentOn");

                    b.HasKey("StatusTrackerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HairAnalysisStatusId");

                    b.ToTable("StatusTracker");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StreakCountTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("StreakCount");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("StreakCountTrackers");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StyleRecipeHairStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<int>("HairStyleId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("StyleRecipeHairStyle");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylishCommon", b =>
                {
                    b.Property<int>("StylishCommonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<int>("StylistId");

                    b.Property<int>("StylistSpecialtyId");

                    b.HasKey("StylishCommonId");

                    b.HasIndex("StylistId");

                    b.HasIndex("StylistSpecialtyId");

                    b.ToTable("StylishCommons");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Stylist", b =>
                {
                    b.Property<int>("StylistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Background");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Notes");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SalonName");

                    b.Property<string>("State");

                    b.Property<string>("StylistName");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.HasKey("StylistId");

                    b.ToTable("Stylists");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylistNotesHHCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<string>("Notes");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("StylistNotesHHCPs");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylistSpecialty", b =>
                {
                    b.Property<int>("StylistSpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("StylistSpecialtyId");

                    b.ToTable("StylistSpecialties");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.TaggedUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PostId");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("TaggedUsers");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Tags", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.TimeZones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Timezones");

                    b.HasKey("Id");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Tools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualName");

                    b.Property<string>("BrandName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Price");

                    b.Property<string>("ToolDetails");

                    b.Property<string>("ToolLink");

                    b.Property<string>("ToolName");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.TrackingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairStyle");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TrackingDetails");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.UserCodes", b =>
                {
                    b.Property<int>("UserCodeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.HasKey("UserCodeId");

                    b.ToTable("UserCodes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.UsersTicketsEntity", b =>
                {
                    b.Property<long>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Priority");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("UserId");

                    b.HasKey("TicketId");

                    b.ToTable("UsersTicketsEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.VideoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("VideoCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.WebLogin", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("OwnerSalonId");

                    b.Property<string>("Password");

                    b.Property<string>("UserEmail");

                    b.Property<bool?>("UserType");

                    b.Property<int?>("UserTypeId");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("WebLogins");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.CodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OpCode");

                    b.HasKey("Id");

                    b.ToTable("CodeEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<string>("TemplateCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<bool>("EnableSSL");

                    b.Property<string>("HostName");

                    b.Property<int>("HostPort");

                    b.Property<string>("SMTPPassword");

                    b.Property<string>("SMTPUsername");

                    b.Property<string>("SenderEmail");

                    b.Property<string>("SenderName");

                    b.Property<string>("Subject");

                    b.Property<string>("TemplateName");

                    b.Property<string>("TemplateType");

                    b.Property<int>("TimeOut");

                    b.HasKey("TemplateCode");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.GenericSetting", b =>
                {
                    b.Property<Guid>("SettingID");

                    b.Property<string>("AdminAccountId");

                    b.Property<string>("SettingName");

                    b.Property<string>("SubSettingName");

                    b.Property<int>("DefalutInteger1");

                    b.Property<int>("DefalutInteger2");

                    b.Property<int>("DefalutInteger3");

                    b.Property<int>("DefalutInteger4");

                    b.Property<int>("DefalutInteger5");

                    b.Property<bool>("DefaultBool1");

                    b.Property<bool>("DefaultBool2");

                    b.Property<bool>("DefaultBool3");

                    b.Property<bool>("DefaultBool4");

                    b.Property<bool>("DefaultBool5");

                    b.Property<DateTime?>("DefaultDateTime1");

                    b.Property<DateTime?>("DefaultDateTime2");

                    b.Property<DateTime?>("DefaultDateTime3");

                    b.Property<DateTime?>("DefaultDateTime4");

                    b.Property<DateTime?>("DefaultDateTime5");

                    b.Property<decimal>("DefaultDecimal1");

                    b.Property<decimal>("DefaultDecimal2");

                    b.Property<decimal>("DefaultDecimal3");

                    b.Property<decimal>("DefaultDecimal4");

                    b.Property<decimal>("DefaultDecimal5");

                    b.Property<string>("DefaultTextMax");

                    b.Property<string>("DefaultTextMax1");

                    b.Property<string>("DefaultTextMax2");

                    b.Property<string>("DefaultTextMax3");

                    b.Property<string>("DefaultTextMax4");

                    b.Property<string>("DefaultTextValue100_1")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue100_2")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue20_1")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue20_2")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue250_1")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue250_2")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue50_1")
                        .HasMaxLength(50);

                    b.Property<string>("DefaultTextValue50_2")
                        .HasMaxLength(50);

                    b.HasKey("SettingID", "AdminAccountId", "SettingName", "SubSettingName");

                    b.HasAlternateKey("AdminAccountId", "SettingID", "SettingName", "SubSettingName");

                    b.ToTable("GenericSettings");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CCNumber");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<DateTime?>("HairAIAvailDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsHairAIAvailed");

                    b.Property<string>("PaymentAmount");

                    b.Property<string>("ProviderId");

                    b.Property<string>("ProviderName");

                    b.Property<string>("PurchaseToken");

                    b.Property<string>("SubscriptionId");

                    b.HasKey("PaymentId");

                    b.ToTable("PaymentEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualName");

                    b.Property<int?>("BrandId");

                    b.Property<string>("BrandName");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("HairChallenges");

                    b.Property<bool?>("HideInSearch");

                    b.Property<string>("ImageName");

                    b.Property<string>("Ingredients");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Price");

                    b.Property<string>("Product");

                    b.Property<string>("ProductDetails");

                    b.Property<string>("ProductIndicator");

                    b.Property<string>("ProductLink");

                    b.Property<string>("ProductName");

                    b.Property<string>("ProductTags");

                    b.Property<int?>("ProductTypesId");

                    b.Property<string>("TypeFor");

                    b.Property<int?>("TypeId");

                    b.Property<string>("UPCCode");

                    b.Property<Guid>("guid");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductTypesId");

                    b.ToTable("ProductEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.PromoCode", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("StripePlanId");

                    b.HasKey("Code");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.SubscriptionsEntity", b =>
                {
                    b.Property<string>("StripePlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<double>("Amount");

                    b.Property<string>("Details");

                    b.Property<string>("PlanName");

                    b.Property<double>("Validity");

                    b.HasKey("StripePlanId");

                    b.ToTable("SubscriptionsEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserEmails", b =>
                {
                    b.Property<Guid>("UserEmailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("MobileNumber");

                    b.HasKey("UserEmailId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AIResult");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AccountNo");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<bool?>("BuyHairKit");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<int>("CountryCode");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool?>("CustomerType");

                    b.Property<int?>("CustomerTypeId");

                    b.Property<string>("DeviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("HairType");

                    b.Property<string>("HubSpotContactId");

                    b.Property<string>("ImageURL");

                    b.Property<bool?>("IsAIV2Mobile");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool?>("IsInfluencer");

                    b.Property<bool?>("IsOnTrial");

                    b.Property<bool?>("IsPaid");

                    b.Property<bool?>("IsProCustomer");

                    b.Property<DateTimeOffset?>("LastModifiedAt");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("LastPingTime");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("LoginAlert");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("SalonId");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SignupFrom");

                    b.Property<string>("State");

                    b.Property<string>("StripeCustomerId");

                    b.Property<bool>("Subscribe");

                    b.Property<long>("TicketUserId");

                    b.Property<DateTimeOffset?>("TrialExpiredOn");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<bool>("TwoFactorTrans");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AccessTime");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("UsedCode");

                    b.HasKey("Id");

                    b.ToTable("UserHistories");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UsersCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.AdminAuthentication", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.WebLogin", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Answer", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleGuidances", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BlogArticle", "BlogArticle")
                        .WithMany()
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("MyAvana.Models.Entities.Guidances", "Guidances")
                        .WithMany()
                        .HasForeignKey("GuidancesId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleHairStyle", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BlogArticle", "BlogArticle")
                        .WithMany()
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("MyAvana.Models.Entities.HairStyles", "HairStyles")
                        .WithMany()
                        .HasForeignKey("HairStylesId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleMoods", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BlogArticle", "BlogArticle")
                        .WithMany()
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("MyAvana.Models.Entities.Moods", "Moods")
                        .WithMany()
                        .HasForeignKey("MoodsId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ArticleProduct", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BlogArticle", "BlogArticle")
                        .WithMany()
                        .HasForeignKey("BlogArticleId");

                    b.HasOne("MyAvanaApi.Models.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("ProductEntityId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairChallenge", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairChallengeId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairGoal", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairGoal", "HairGoal")
                        .WithMany()
                        .HasForeignKey("HairGoalId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairState", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairState", "HairState")
                        .WithMany()
                        .HasForeignKey("HairStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandHairType", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairType", "HairType")
                        .WithMany()
                        .HasForeignKey("HairTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandMolecularWeight", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.MolecularWeight", "MolecularWeight")
                        .WithMany()
                        .HasForeignKey("MolecularWeightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandTag", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Tags", "Tags")
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BrandsBrandRecommendationStatus", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.BrandRecommendationStatus", "BrandRecommendationStatus")
                        .WithMany()
                        .HasForeignKey("BrandRecommendationStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ClassificationBrand", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BrandClassification", "BrandClassification")
                        .WithMany()
                        .HasForeignKey("BrandClassificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Comments", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.GroupPost", "GroupPost")
                        .WithMany("Comments")
                        .HasForeignKey("GroupPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerAIResult", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerTypeHistory", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.CustomerType", "NewCustomerType")
                        .WithMany()
                        .HasForeignKey("NewCustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.CustomerType", "OldCustomerType")
                        .WithMany()
                        .HasForeignKey("OldCustomerTypeId");

                    b.HasOne("MyAvana.Models.Entities.WebLogin", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineHairStyles", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineIngredients", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineProducts", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineRegimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairAnalysisStatusHistory", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairAnalysisStatus", "NewHairAnalysisStatus")
                        .WithMany()
                        .HasForeignKey("NewHairAnalysisStatusId");

                    b.HasOne("MyAvana.Models.Entities.HairAnalysisStatus", "OldHairAnalysisStatus")
                        .WithMany()
                        .HasForeignKey("OldHairAnalysisStatusId");

                    b.HasOne("MyAvana.Models.Entities.WebLogin", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairChallengeVideoMapping", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.MediaLinkEntity", "MediaLinkEntity")
                        .WithMany()
                        .HasForeignKey("MediaLinkEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairElasticity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Elasticity", "Elasticity")
                        .WithMany()
                        .HasForeignKey("ElasticityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairGoalVideoMapping", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairGoal", "HairGoal")
                        .WithMany()
                        .HasForeignKey("HairGoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.MediaLinkEntity", "MediaLinkEntity")
                        .WithMany()
                        .HasForeignKey("MediaLinkEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairHealth", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Health", "Health")
                        .WithMany()
                        .HasForeignKey("HealthId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairObservation", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ObsBreakage", "ObsBreakage")
                        .WithMany()
                        .HasForeignKey("ObsBreakageId");

                    b.HasOne("MyAvana.Models.Entities.ObsChemicalProducts", "ObsChemicalProducts")
                        .WithMany()
                        .HasForeignKey("ObsChemicalProductsId");

                    b.HasOne("MyAvana.Models.Entities.ObsDamage", "ObsDamage")
                        .WithMany()
                        .HasForeignKey("ObsDamageId");

                    b.HasOne("MyAvana.Models.Entities.ObsElasticity", "ObsElasticity")
                        .WithMany()
                        .HasForeignKey("ObsElasticityId");

                    b.HasOne("MyAvana.Models.Entities.ObsPhysicalProducts", "ObsPhysicalProducts")
                        .WithMany()
                        .HasForeignKey("ObsPhysicalProductsId");

                    b.HasOne("MyAvana.Models.Entities.ObsSplitting", "ObsSplitting")
                        .WithMany()
                        .HasForeignKey("ObsSplittingId");

                    b.HasOne("MyAvana.Models.Entities.Observation", "Observation")
                        .WithMany()
                        .HasForeignKey("ObservationId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairPorosity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Pororsity", "Porosity")
                        .WithMany()
                        .HasForeignKey("PorosityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairScope", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandUploadNotification", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Salons", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrands", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandsImages", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairStrands", "HairStrands")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MediaLinkEntity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.VideoCategory", "VideoCategory")
                        .WithMany()
                        .HasForeignKey("VideoCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MobileHelpFAQ", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.MobileHelpTopic", "MobileHelpTopic")
                        .WithMany()
                        .HasForeignKey("MobileHelpTopicId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.PrePopulateTypes", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductCommon", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.BrandClassification", "BrandClassification")
                        .WithMany()
                        .HasForeignKey("BrandClassificationId");

                    b.HasOne("MyAvana.Models.Entities.CustomerPreference", "CustomerPreference")
                        .WithMany()
                        .HasForeignKey("CustomerPreferenceId");

                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairChallengeId");

                    b.HasOne("MyAvana.Models.Entities.HairGoal", "HairGoal")
                        .WithMany()
                        .HasForeignKey("HairGoalId");

                    b.HasOne("MyAvana.Models.Entities.HairStyles", "HairStyles")
                        .WithMany()
                        .HasForeignKey("HairStylesId");

                    b.HasOne("MyAvana.Models.Entities.HairType", "HairType")
                        .WithMany()
                        .HasForeignKey("HairTypeId");

                    b.HasOne("MyAvana.Models.Entities.MolecularWeight", "MolecularWeight")
                        .WithMany()
                        .HasForeignKey("MolecularWeightId");

                    b.HasOne("MyAvana.Models.Entities.ProductClassification", "ProductClassification")
                        .WithMany()
                        .HasForeignKey("ProductClassificationId");

                    b.HasOne("MyAvanaApi.Models.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("ProductEntityId");

                    b.HasOne("MyAvana.Models.Entities.ProductIndicator", "ProductIndicator")
                        .WithMany()
                        .HasForeignKey("ProductIndicatorId");

                    b.HasOne("MyAvana.Models.Entities.ProductRecommendationStatus", "ProductRecommendationStatus")
                        .WithMany()
                        .HasForeignKey("ProductRecommendationStatusId");

                    b.HasOne("MyAvana.Models.Entities.ProductTags", "ProductTags")
                        .WithMany()
                        .HasForeignKey("ProductTagsId");

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductImage", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("ProductEntityId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductType", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.ProductTypeCategory", "ProductTypeCategory")
                        .WithMany()
                        .HasForeignKey("ProductTypeCategoryId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairChallenge", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairGoal", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairGoal", "HairGoal")
                        .WithMany()
                        .HasForeignKey("HairGoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeHairStyles", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairStyles", "HairStyles")
                        .WithMany()
                        .HasForeignKey("HairStylesId");

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeScalpChallenge", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairScalpChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questionaire", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("MyAvana.Models.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedCategory", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedIngredients", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductTypes", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProducts", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStyleRecipe", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStylingRegimen", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedRegimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStyleRecipeVideos", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStylist", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedTools", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedVideos", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Regimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.RegimenSteps", "RegimenSteps")
                        .WithMany()
                        .HasForeignKey("RegimenStepsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonNotesHHCP", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.WebLogin", "WebLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonsOwner", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Salons", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.WebLogin", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SalonsStylist", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Salons", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId");

                    b.HasOne("MyAvana.Models.Entities.Stylist", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.SharedHHCP", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ShopifyRequest", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.States", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StatusTracker", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairAnalysisStatus", "TrackingStatus")
                        .WithMany()
                        .HasForeignKey("HairAnalysisStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StyleRecipeHairStyle", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylishCommon", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Stylist", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.StylistSpecialty", "StylistSpecialty")
                        .WithMany()
                        .HasForeignKey("StylistSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylistNotesHHCP", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.WebLogin", "WebLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.WebLogin", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.UserType", "UserTypes")
                        .WithMany()
                        .HasForeignKey("UserTypeId");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.ProductEntity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductTypes")
                        .WithMany()
                        .HasForeignKey("ProductTypesId");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.CustomerType", "CustomerTypes")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}

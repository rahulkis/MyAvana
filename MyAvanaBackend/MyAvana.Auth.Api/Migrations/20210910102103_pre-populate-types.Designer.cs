// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAvana.DAL.Auth;

namespace MyAvana.Auth.Api.Migrations
{
    [DbContext(typeof(AvanaContext))]
    [Migration("20210910102103_pre-populate-types")]
    partial class prepopulatetypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.AdditionalHairInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DensityDescription");

                    b.Property<string>("DensityId");

                    b.Property<string>("ElasticityDescription");

                    b.Property<string>("ElasticityId");

                    b.Property<int>("HairId");

                    b.Property<string>("HealthDescription");

                    b.Property<string>("HealthId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PorosityDescription");

                    b.Property<string>("PorosityId");

                    b.Property<string>("TextureDescription");

                    b.Property<string>("TextureId");

                    b.Property<string>("TypeDescription");

                    b.Property<string>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("AdditionalHairInfo");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.BlogArticle", b =>
                {
                    b.Property<int>("BlogArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<string>("HeadLine");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Url");

                    b.HasKey("BlogArticleId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("GroupPostId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.HasIndex("GroupPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerHairChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("HairInfoId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("CustomerHairChallenge");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerHairGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("HairInfoId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("CustomerHairGoals");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.CustomerMessage", b =>
                {
                    b.Property<int>("CustomerMessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentFile");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Message");

                    b.Property<string>("Subject");

                    b.Property<Guid>("UserId");

                    b.HasKey("CustomerMessageId");

                    b.ToTable("CustomerMessage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineHairStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("HairStyleId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineHairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<int>("IngredientId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineIngredients");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineRegimens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenId");

                    b.Property<int>("RoutineTrackerId");

                    b.HasKey("Id");

                    b.HasIndex("RoutineTrackerId");

                    b.ToTable("DailyRoutineRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineTracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("HairStyle");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("Notes");

                    b.Property<string>("ProfileImage");

                    b.Property<DateTime>("TrackTime");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DailyRoutineTracker");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Elasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Elasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairType");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.GroupPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioUrl");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("HairType");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("UserEmail");

                    b.Property<string>("VideoUrl");

                    b.HasKey("Id");

                    b.ToTable("GroupPosts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairChallenges", b =>
                {
                    b.Property<int>("HairChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("HairChallengeId");

                    b.ToTable("HairChallenges");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairElasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElasticityId");

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.HasKey("Id");

                    b.HasIndex("ElasticityId");

                    b.HasIndex("HairProfileId");

                    b.ToTable("HairElasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<int>("HealthId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("HealthId");

                    b.ToTable("HairHealths");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.Property<int?>("ObsBreakageId");

                    b.Property<int?>("ObsChemicalProductId");

                    b.Property<int?>("ObsChemicalProductsId");

                    b.Property<int?>("ObsDamageId");

                    b.Property<int?>("ObsElasticityId");

                    b.Property<int?>("ObsPhysicalProductId");

                    b.Property<int?>("ObsPhysicalProductsId");

                    b.Property<int?>("ObsSplittingId");

                    b.Property<int?>("ObservationId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("ObsBreakageId");

                    b.HasIndex("ObsChemicalProductsId");

                    b.HasIndex("ObsDamageId");

                    b.HasIndex("ObsElasticityId");

                    b.HasIndex("ObsPhysicalProductsId");

                    b.HasIndex("ObsSplittingId");

                    b.HasIndex("ObservationId");

                    b.ToTable("HairObservations");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairPorosity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HairProfileId");

                    b.Property<bool>("IsBottomLeft");

                    b.Property<bool>("IsBottomRight");

                    b.Property<bool>("IsCrown");

                    b.Property<bool>("IsTopLeft");

                    b.Property<bool>("IsTopRight");

                    b.Property<int>("PorosityId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.HasIndex("PorosityId");

                    b.ToTable("HairPorosities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsultantNotes");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairId");

                    b.Property<string>("HealthSummary");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDrafted");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("HairProfiles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BottomLeftHealthText");

                    b.Property<string>("BottomLeftPhoto");

                    b.Property<string>("BottomLeftStrandDiameter");

                    b.Property<string>("BottomRightHealthText");

                    b.Property<string>("BottomRightPhoto");

                    b.Property<string>("BottomRightStrandDiameter");

                    b.Property<string>("CrownHealthText");

                    b.Property<string>("CrownPhoto");

                    b.Property<string>("CrownStrandDiameter");

                    b.Property<int>("HairProfileId");

                    b.Property<string>("TopLeftHealthText");

                    b.Property<string>("TopLeftPhoto");

                    b.Property<string>("TopLeftStrandDiameter");

                    b.Property<string>("TopRightHealthText");

                    b.Property<string>("TopRightPhoto");

                    b.Property<string>("TopRightStrandDiameter");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("HairStrands");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandsImages", b =>
                {
                    b.Property<int>("StrandsImagesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BottomLeftImage");

                    b.Property<string>("BottomRightImage");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CrownImage");

                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TopLeftImage");

                    b.Property<string>("TopRightImage");

                    b.HasKey("StrandsImagesId");

                    b.HasIndex("Id");

                    b.ToTable("HairStrandsImages");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStyles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Style");

                    b.HasKey("Id");

                    b.ToTable("HairStyles");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairType", b =>
                {
                    b.Property<int>("HairTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("HairTypeId");

                    b.ToTable("HairTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Health", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Healths");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.IngedientsEntity", b =>
                {
                    b.Property<int>("IngedientsEntityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Challenges");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("ImageUrl");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("IngedientsEntityId");

                    b.ToTable("IngedientsEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.LikePosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLike");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<int>("PostId");

                    b.Property<string>("UserEmail");

                    b.HasKey("Id");

                    b.ToTable("LikePosts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MediaLinkEntity", b =>
                {
                    b.Property<int>("MediaLinkEntityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Header");

                    b.Property<Guid>("Id");

                    b.Property<string>("ImageLink");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Title");

                    b.Property<int>("VideoCategoryId");

                    b.Property<string>("VideoId");

                    b.HasKey("MediaLinkEntityId");

                    b.HasIndex("VideoCategoryId");

                    b.ToTable("MediaLinkEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsBreakage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsBreakage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsChemicalProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsChemicalProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsDamage");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsElasticity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsElasticities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsPhysicalProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsPhysicalProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ObsSplitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("ObsSplitting");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Pororsity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("Pororsities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductClassification", b =>
                {
                    b.Property<int>("ProductClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductClassificationId");

                    b.ToTable("ProductClassification");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductCommon", b =>
                {
                    b.Property<int>("ProductCommonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("HairChallengeId");

                    b.Property<int?>("HairTypeId");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ProductClassificationId");

                    b.Property<int?>("ProductEntityId");

                    b.Property<int?>("ProductIndicatorId");

                    b.Property<int?>("ProductTagsId");

                    b.HasKey("ProductCommonId");

                    b.HasIndex("HairChallengeId");

                    b.HasIndex("HairTypeId");

                    b.HasIndex("ProductClassificationId");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("ProductIndicatorId");

                    b.HasIndex("ProductTagsId");

                    b.ToTable("ProductCommons");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductIndicator", b =>
                {
                    b.Property<int>("ProductIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductIndicatorId");

                    b.ToTable("ProductIndicator");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTags", b =>
                {
                    b.Property<int>("ProductTagsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsActive");

                    b.HasKey("ProductTagsId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<int?>("ParentId");

                    b.Property<string>("ProductName");

                    b.Property<int?>("ProductTypeCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeCategoryId");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductTypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsHair");

                    b.Property<bool?>("IsRegimens");

                    b.HasKey("Id");

                    b.ToTable("ProductTypeCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questionaire", b =>
                {
                    b.Property<int>("QuestionaireId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("DescriptiveAnswer");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("QuestionId");

                    b.Property<string>("UserId");

                    b.HasKey("QuestionaireId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Questionaires");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questions", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsTagged");

                    b.Property<string>("Question");

                    b.Property<int>("SerialNo");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsHealthyRegimen");

                    b.Property<bool>("IsStylingRegimen");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedIngredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<int>("IngredientId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedIngredients");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsHealthyRegimen");

                    b.Property<bool>("IsStylingRegimen");

                    b.Property<string>("Name");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProductTypes");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAllEssential");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProducts");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStylingRegimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsAllStyling");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedProductsStyleRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedRegimens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedRegimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStylist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("StylistId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedStylists");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("ToolId");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedTools");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("HairProfileId");

                    b.Property<bool?>("IsActive");

                    b.Property<int>("MediaLinkEntityId");

                    b.Property<string>("Name");

                    b.Property<string>("ThumbNail");

                    b.HasKey("Id");

                    b.HasIndex("HairProfileId");

                    b.ToTable("RecommendedVideos");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RegimenSteps", b =>
                {
                    b.Property<int>("RegimenStepsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Step10Instruction");

                    b.Property<string>("Step10Photo");

                    b.Property<string>("Step11Instruction");

                    b.Property<string>("Step11Photo");

                    b.Property<string>("Step12Instruction");

                    b.Property<string>("Step12Photo");

                    b.Property<string>("Step13Instruction");

                    b.Property<string>("Step13Photo");

                    b.Property<string>("Step14Instruction");

                    b.Property<string>("Step14Photo");

                    b.Property<string>("Step15Instruction");

                    b.Property<string>("Step15Photo");

                    b.Property<string>("Step16Instruction");

                    b.Property<string>("Step16Photo");

                    b.Property<string>("Step17Instruction");

                    b.Property<string>("Step17Photo");

                    b.Property<string>("Step18Instruction");

                    b.Property<string>("Step18Photo");

                    b.Property<string>("Step19Instruction");

                    b.Property<string>("Step19Photo");

                    b.Property<string>("Step1Instruction");

                    b.Property<string>("Step1Photo");

                    b.Property<string>("Step20Instruction");

                    b.Property<string>("Step20Photo");

                    b.Property<string>("Step2Instruction");

                    b.Property<string>("Step2Photo");

                    b.Property<string>("Step3Instruction");

                    b.Property<string>("Step3Photo");

                    b.Property<string>("Step4Instruction");

                    b.Property<string>("Step4Photo");

                    b.Property<string>("Step5Instruction");

                    b.Property<string>("Step5Photo");

                    b.Property<string>("Step6Instruction");

                    b.Property<string>("Step6Photo");

                    b.Property<string>("Step7Instruction");

                    b.Property<string>("Step7Photo");

                    b.Property<string>("Step8Instruction");

                    b.Property<string>("Step8Photo");

                    b.Property<string>("Step9Instruction");

                    b.Property<string>("Step9Photo");

                    b.HasKey("RegimenStepsId");

                    b.ToTable("RegimenSteps");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Regimens", b =>
                {
                    b.Property<int>("RegimensId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("RegimenStepsId");

                    b.Property<int>("Step1");

                    b.Property<int>("Step2");

                    b.Property<int>("Step3");

                    b.Property<int>("Step4");

                    b.Property<int>("Step5");

                    b.Property<string>("Title");

                    b.HasKey("RegimensId");

                    b.HasIndex("RegimenStepsId");

                    b.ToTable("Regimens");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylishCommon", b =>
                {
                    b.Property<int>("StylishCommonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<int>("StylistId");

                    b.Property<int>("StylistSpecialtyId");

                    b.HasKey("StylishCommonId");

                    b.HasIndex("StylistId");

                    b.HasIndex("StylistSpecialtyId");

                    b.ToTable("StylishCommons");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Stylist", b =>
                {
                    b.Property<int>("StylistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Background");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Notes");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SalonName");

                    b.Property<string>("State");

                    b.Property<string>("StylistName");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.HasKey("StylistId");

                    b.ToTable("Stylists");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylistSpecialty", b =>
                {
                    b.Property<int>("StylistSpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("StylistSpecialtyId");

                    b.ToTable("StylistSpecialties");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Tools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualName");

                    b.Property<string>("BrandName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Price");

                    b.Property<string>("ToolDetails");

                    b.Property<string>("ToolLink");

                    b.Property<string>("ToolName");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.TrackingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("HairStyle");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TrackingDetails");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.UsersTicketsEntity", b =>
                {
                    b.Property<long>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Priority");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("UserId");

                    b.HasKey("TicketId");

                    b.ToTable("UsersTicketsEntities");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.VideoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("VideoCategories");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.WebLogin", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Password");

                    b.Property<string>("UserEmail");

                    b.HasKey("UserId");

                    b.ToTable("WebLogins");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.CodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OpCode");

                    b.HasKey("Id");

                    b.ToTable("CodeEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.EmailTemplate", b =>
                {
                    b.Property<string>("TemplateCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<bool>("EnableSSL");

                    b.Property<string>("HostName");

                    b.Property<int>("HostPort");

                    b.Property<string>("SMTPPassword");

                    b.Property<string>("SMTPUsername");

                    b.Property<string>("SenderEmail");

                    b.Property<string>("SenderName");

                    b.Property<string>("Subject");

                    b.Property<string>("TemplateName");

                    b.Property<string>("TemplateType");

                    b.Property<int>("TimeOut");

                    b.HasKey("TemplateCode");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.GenericSetting", b =>
                {
                    b.Property<Guid>("SettingID");

                    b.Property<string>("AdminAccountId");

                    b.Property<string>("SettingName");

                    b.Property<string>("SubSettingName");

                    b.Property<int>("DefalutInteger1");

                    b.Property<int>("DefalutInteger2");

                    b.Property<int>("DefalutInteger3");

                    b.Property<int>("DefalutInteger4");

                    b.Property<int>("DefalutInteger5");

                    b.Property<bool>("DefaultBool1");

                    b.Property<bool>("DefaultBool2");

                    b.Property<bool>("DefaultBool3");

                    b.Property<bool>("DefaultBool4");

                    b.Property<bool>("DefaultBool5");

                    b.Property<DateTime?>("DefaultDateTime1");

                    b.Property<DateTime?>("DefaultDateTime2");

                    b.Property<DateTime?>("DefaultDateTime3");

                    b.Property<DateTime?>("DefaultDateTime4");

                    b.Property<DateTime?>("DefaultDateTime5");

                    b.Property<decimal>("DefaultDecimal1");

                    b.Property<decimal>("DefaultDecimal2");

                    b.Property<decimal>("DefaultDecimal3");

                    b.Property<decimal>("DefaultDecimal4");

                    b.Property<decimal>("DefaultDecimal5");

                    b.Property<string>("DefaultTextMax");

                    b.Property<string>("DefaultTextMax1");

                    b.Property<string>("DefaultTextMax2");

                    b.Property<string>("DefaultTextMax3");

                    b.Property<string>("DefaultTextMax4");

                    b.Property<string>("DefaultTextValue100_1")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue100_2")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTextValue20_1")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue20_2")
                        .HasMaxLength(20);

                    b.Property<string>("DefaultTextValue250_1")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue250_2")
                        .HasMaxLength(250);

                    b.Property<string>("DefaultTextValue50_1")
                        .HasMaxLength(50);

                    b.Property<string>("DefaultTextValue50_2")
                        .HasMaxLength(50);

                    b.HasKey("SettingID", "AdminAccountId", "SettingName", "SubSettingName");

                    b.HasAlternateKey("AdminAccountId", "SettingID", "SettingName", "SubSettingName");

                    b.ToTable("GenericSettings");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CCNumber");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaymentAmount");

                    b.Property<string>("ProviderId");

                    b.Property<string>("ProviderName");

                    b.Property<string>("SubscriptionId");

                    b.HasKey("PaymentId");

                    b.ToTable("PaymentEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualName");

                    b.Property<string>("BrandName");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("HairChallenges");

                    b.Property<string>("ImageName");

                    b.Property<string>("Ingredients");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("Price");

                    b.Property<string>("Product");

                    b.Property<string>("ProductDetails");

                    b.Property<string>("ProductIndicator");

                    b.Property<string>("ProductLink");

                    b.Property<string>("ProductName");

                    b.Property<string>("ProductTags");

                    b.Property<int?>("ProductTypesId");

                    b.Property<string>("TypeFor");

                    b.Property<int?>("TypeId");

                    b.Property<Guid>("guid");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypesId");

                    b.ToTable("ProductEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.PromoCode", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("StripePlanId");

                    b.HasKey("Code");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.SubscriptionsEntity", b =>
                {
                    b.Property<string>("StripePlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<double>("Amount");

                    b.Property<string>("Details");

                    b.Property<string>("PlanName");

                    b.Property<double>("Validity");

                    b.HasKey("StripePlanId");

                    b.ToTable("SubscriptionsEntities");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserEmails", b =>
                {
                    b.Property<Guid>("UserEmailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("MobileNumber");

                    b.HasKey("UserEmailId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AccountNo");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<int>("CountryCode");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("DeviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("HairType");

                    b.Property<string>("HubSpotContactId");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsBlocked");

                    b.Property<DateTimeOffset?>("LastModifiedAt");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("LoginAlert");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<string>("StripeCustomerId");

                    b.Property<bool>("Subscribe");

                    b.Property<long>("TicketUserId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<bool>("TwoFactorTrans");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AccessTime");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("UsedCode");

                    b.HasKey("Id");

                    b.ToTable("UserHistories");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.UsersCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyAvanaApi.Models.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Answer", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Comments", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.GroupPost", "GroupPost")
                        .WithMany("Comments")
                        .HasForeignKey("GroupPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineHairStyles", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineIngredients", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineProducts", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.DailyRoutineRegimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.DailyRoutineTracker", "DailyRoutineTracker")
                        .WithMany()
                        .HasForeignKey("RoutineTrackerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairElasticity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Elasticity", "Elasticity")
                        .WithMany()
                        .HasForeignKey("ElasticityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairHealth", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Health", "Health")
                        .WithMany()
                        .HasForeignKey("HealthId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairObservation", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.ObsBreakage", "ObsBreakage")
                        .WithMany()
                        .HasForeignKey("ObsBreakageId");

                    b.HasOne("MyAvana.Models.Entities.ObsChemicalProducts", "ObsChemicalProducts")
                        .WithMany()
                        .HasForeignKey("ObsChemicalProductsId");

                    b.HasOne("MyAvana.Models.Entities.ObsDamage", "ObsDamage")
                        .WithMany()
                        .HasForeignKey("ObsDamageId");

                    b.HasOne("MyAvana.Models.Entities.ObsElasticity", "ObsElasticity")
                        .WithMany()
                        .HasForeignKey("ObsElasticityId");

                    b.HasOne("MyAvana.Models.Entities.ObsPhysicalProducts", "ObsPhysicalProducts")
                        .WithMany()
                        .HasForeignKey("ObsPhysicalProductsId");

                    b.HasOne("MyAvana.Models.Entities.ObsSplitting", "ObsSplitting")
                        .WithMany()
                        .HasForeignKey("ObsSplittingId");

                    b.HasOne("MyAvana.Models.Entities.Observation", "Observation")
                        .WithMany()
                        .HasForeignKey("ObservationId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairPorosity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.Pororsity", "Porosity")
                        .WithMany()
                        .HasForeignKey("PorosityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrands", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.HairStrandsImages", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairStrands", "HairStrands")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.MediaLinkEntity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.VideoCategory", "VideoCategory")
                        .WithMany()
                        .HasForeignKey("VideoCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductCommon", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairChallenges", "HairChallenges")
                        .WithMany()
                        .HasForeignKey("HairChallengeId");

                    b.HasOne("MyAvana.Models.Entities.HairType", "HairType")
                        .WithMany()
                        .HasForeignKey("HairTypeId");

                    b.HasOne("MyAvana.Models.Entities.ProductClassification", "ProductClassification")
                        .WithMany()
                        .HasForeignKey("ProductClassificationId");

                    b.HasOne("MyAvanaApi.Models.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("ProductEntityId");

                    b.HasOne("MyAvana.Models.Entities.ProductIndicator", "ProductIndicator")
                        .WithMany()
                        .HasForeignKey("ProductIndicatorId");

                    b.HasOne("MyAvana.Models.Entities.ProductTags", "ProductTags")
                        .WithMany()
                        .HasForeignKey("ProductTagsId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.ProductType", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.ProductTypeCategory", "ProductTypeCategory")
                        .WithMany()
                        .HasForeignKey("ProductTypeCategoryId");
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Questionaire", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("MyAvana.Models.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedCategory", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedIngredients", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductTypes", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProducts", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedProductsStylingRegimen", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedRegimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedStylist", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedTools", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.RecommendedVideos", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.HairProfile", "HairProfile")
                        .WithMany()
                        .HasForeignKey("HairProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.Regimens", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.RegimenSteps", "RegimenSteps")
                        .WithMany()
                        .HasForeignKey("RegimenStepsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvana.Models.Entities.StylishCommon", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.Stylist", "Stylist")
                        .WithMany()
                        .HasForeignKey("StylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAvana.Models.Entities.StylistSpecialty", "StylistSpecialty")
                        .WithMany()
                        .HasForeignKey("StylistSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyAvanaApi.Models.Entities.ProductEntity", b =>
                {
                    b.HasOne("MyAvana.Models.Entities.ProductType", "ProductTypes")
                        .WithMany()
                        .HasForeignKey("ProductTypesId");
                });
#pragma warning restore 612, 618
        }
    }
}
